{
  "master": {
    "tasks": [
      {
        "id": 21,
        "title": "미들웨어 구조 분석 및 기반 코드 준비",
        "description": "현재 middleware.ts 파일 분석하고 IP 기반 언어 감지를 위한 기본 구조 설정",
        "details": "기존 middleware.ts 파일의 구조를 분석하고 정적 자산 제외, 로케일 별칭 처리, i18n 미들웨어 실행, Supabase 인증 미들웨어 실행 부분을 파악합니다. 새로운 언어 감지 로직을 추가할 위치를 결정하고 기본 타입 정의와 유틸리티 함수들을 위한 구조를 준비합니다.",
        "testStrategy": "기존 미들웨어 동작 확인 테스트, 코드 구조 분석 문서화, 변경 전후 동작 비교 테스트 계획 수립",
        "priority": "high",
        "dependencies": [],
        "status": "in-progress",
        "subtasks": []
      },
      {
        "id": 22,
        "title": "국가-언어 매핑 테이블 구현",
        "description": "국가 코드를 언어 코드로 매핑하는 테이블과 관련 유틸리티 함수 구현",
        "details": "COUNTRY_LOCALE_MAP 상수를 정의하여 KR→ko, JP→ja, US/GB/CA/AU/NZ/IE→en 등의 매핑을 구현합니다. mapCountryToLocale 함수를 작성하여 국가 코드를 받아 해당 언어 코드를 반환하도록 합니다. 지원하지 않는 국가는 기본값으로 'en'을 반환합니다.",
        "testStrategy": "매핑 테이블 정확성 검증, 대소문자 처리 테스트, 존재하지 않는 국가 코드 처리 테스트, 기본값 반환 테스트",
        "priority": "high",
        "dependencies": [
          21
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 23,
        "title": "IP 주소 추출 및 검증 유틸리티 함수 구현",
        "description": "클라이언트 IP 주소를 추출하고 로컬 IP인지 확인하는 유틸리티 함수들 구현",
        "details": "getClientIP 함수를 구현하여 x-forwarded-for, x-real-ip 헤더와 request.ip에서 클라이언트 IP를 추출합니다. isLocalIP 함수를 구현하여 127.x.x.x, 192.168.x.x, 10.x.x.x, 172.16-31.x.x, ::1, localhost 패턴을 확인합니다. 첫 번째 유효한 IP 주소를 반환하도록 처리합니다.",
        "testStrategy": "다양한 헤더 조합으로 IP 추출 테스트, 로컬 IP 패턴 검증 테스트, IPv4/IPv6 주소 처리 테스트, 잘못된 IP 형식 처리 테스트",
        "priority": "high",
        "dependencies": [
          21
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 24,
        "title": "Vercel Geo API 기반 지역 감지 구현",
        "description": "Vercel의 request.geo를 활용한 기본 지역 감지 기능 구현",
        "details": "detectLocaleFromIP 함수를 구현하여 request.geo.country 정보를 사용해 지역을 감지합니다. Vercel 배포 환경에서 자동으로 제공되는 지역 정보를 활용하고, 오류 처리와 타임아웃 설정을 포함합니다. 캐싱 메커니즘을 적용하여 성능을 최적화합니다.",
        "testStrategy": "Vercel 배포 환경에서 실제 지역 감지 테스트, 다양한 국가 IP에서 동작 확인, 오류 상황 처리 테스트, 캐싱 동작 검증",
        "priority": "high",
        "dependencies": [
          22,
          23
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 25,
        "title": "브라우저 언어 감지 기능 구현",
        "description": "Accept-Language 헤더를 파싱하여 브라우저 언어를 감지하는 기능 구현",
        "details": "detectLocaleFromHeaders 함수를 구현하여 Accept-Language 헤더를 파싱합니다. 'ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7' 형태의 헤더를 파싱하고 quality 값에 따라 정렬하여 가장 선호하는 언어를 선택합니다. 지원하는 언어 코드만 반환하도록 검증합니다.",
        "testStrategy": "다양한 Accept-Language 헤더 형식 파싱 테스트, quality 값 정렬 테스트, 지원하지 않는 언어 필터링 테스트, 헤더 없는 경우 처리 테스트",
        "priority": "medium",
        "dependencies": [
          21
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 26,
        "title": "통합 언어 감지 로직 구현",
        "description": "우선순위에 따른 단계별 언어 감지 로직을 통합한 detectLocale 함수 구현",
        "details": "detectLocale 함수를 구현하여 1순위: URL 경로의 언어 코드, 2순위: 쿠키의 저장된 언어, 3순위: IP 기반 지역 감지, 4순위: 브라우저 언어 감지, 5순위: 기본 언어(ko) 순으로 언어를 감지합니다. 각 단계에서 유효한 언어 코드를 찾으면 즉시 반환하고, 실패 시 다음 단계로 넘어갑니다.",
        "testStrategy": "각 우선순위별 동작 확인 테스트, 폴백 메커니즘 테스트, 다양한 시나리오 조합 테스트, 성능 측정 테스트",
        "priority": "high",
        "dependencies": [
          24,
          25
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 27,
        "title": "메모리 캐싱 시스템 구현",
        "description": "IP 기반 지역 조회 결과를 메모리에 캐싱하는 시스템 구현",
        "details": "Map 기반 메모리 캐시를 구현하여 IP 주소별로 국가 정보와 타임스탬프를 저장합니다. 1시간 캐시 지속 시간을 설정하고, getCachedGeoLocation 함수를 통해 캐시된 데이터를 우선 확인한 후 만료된 경우에만 새로 조회합니다. 메모리 사용량 관리를 위한 캐시 크기 제한도 구현합니다.",
        "testStrategy": "캐시 저장 및 조회 테스트, 만료 시간 처리 테스트, 메모리 사용량 모니터링, 캐시 히트율 측정, 동시성 처리 테스트",
        "priority": "medium",
        "dependencies": [
          24
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 28,
        "title": "미들웨어 통합 및 동적 라우팅 설정",
        "description": "기존 미들웨어에 새로운 언어 감지 로직을 통합하고 동적 라우팅 설정 구현",
        "details": "기존 middleware.ts 파일을 수정하여 detectLocale 함수를 호출하고 결과를 바탕으로 동적 라우팅 설정을 생성합니다. localeDetection을 true로 설정하고 감지된 언어를 defaultLocale로 설정합니다. 언어 선택 결과를 NEXT_LOCALE 쿠키에 저장하여 사용자 선택을 기억합니다.",
        "testStrategy": "미들웨어 통합 동작 테스트, 동적 라우팅 설정 검증, 쿠키 저장 확인, 기존 Supabase 인증 미들웨어와의 호환성 테스트",
        "priority": "high",
        "dependencies": [
          26,
          27
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 29,
        "title": "외부 IP 지역 조회 API 통합 (선택사항)",
        "description": "로컬 개발 환경을 위한 외부 IP 지역 조회 API 통합 구현",
        "details": "fetchGeoLocation 함수를 구현하여 ipapi.co 등의 무료 IP 지역 조회 서비스를 통합합니다. 로컬 개발 환경에서 request.geo가 없을 때만 사용하도록 조건부 처리합니다. API 호출 실패 시 적절한 오류 처리와 폴백 메커니즘을 구현합니다. 타임아웃과 재시도 로직도 포함합니다.",
        "testStrategy": "외부 API 호출 테스트, 타임아웃 처리 테스트, 네트워크 오류 상황 테스트, 로컬 환경에서만 동작 확인, API 응답 형식 검증",
        "priority": "low",
        "dependencies": [
          28
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 30,
        "title": "테스트 및 성능 최적화",
        "description": "구현된 IP 기반 언어 감지 시스템의 종합 테스트 및 성능 최적화 수행",
        "details": "개발 환경에서 모의 지역 테스트를 위한 X-Mock-Country 헤더 처리를 구현합니다. 다양한 시나리오의 통합 테스트를 수행하고 성능 병목점을 식별합니다. 에러 처리 강화, 메모리 사용량 최적화, 응답 시간 개선을 수행합니다. 프로덕션 배포를 위한 모니터링 설정도 포함합니다.",
        "testStrategy": "종합 시나리오 테스트, 성능 벤치마크 수행, 메모리 누수 검사, 오류 복구 테스트, 다양한 브라우저/디바이스 환경 테스트, 부하 테스트",
        "priority": "high",
        "dependencies": [
          29
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-16T16:56:25.137Z",
      "updated": "2025-07-16T17:05:54.987Z",
      "description": "Tasks for master context"
    }
  }
}